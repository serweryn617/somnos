[dral]include header.dral[#dral]

#ifndef DRAL_REGISTER_MODEL_H
#define DRAL_REGISTER_MODEL_H

#include <cstdint>

namespace dral::[dral style="lowercase"]device.name[#dral] {

template<uint8_t position, uint8_t width = 1>
class BitFieldModel
{
public:
  static constexpr uint8_t Width = width;
  static constexpr uint8_t Mask = (1U << width) - 1U;
  static constexpr uint8_t Position = position;

public:
  template<typename T>
  BitFieldModel& operator=(T value)
  {
    m_value = (m_value & ~(Mask << position)) | ((value & Mask) << position);
    return *this;
  }

  operator uint8_t() const
  {
    return (m_value >> position) & Mask;
  }

  explicit operator bool() const
  {
    return m_value & (Mask << position);
  }

  BitFieldModel& operator++()
  {
    return *this = *this + 1U;
  }

  uint8_t operator++(int)
  {
    const uint8_t result = *this;
    ++*this;
    return result;
  }

  BitFieldModel& operator--()
  {
    return *this = *this - 1U;
  }

  uint8_t operator--(int)
  {
    const uint8_t result = *this;
    --*this;
    return result;
  }

private:
  uint8_t m_value;

  static_assert(position >= 0 && position <= 7, "BitFiled position must be between 0 and 7");
  static_assert(width >= 1 && width <= 8, "BitFiled width must be between 1 and 8");
};

template<uint8_t position>
class BitFieldModel<position, 1U>
{
public:
  static constexpr uint8_t Width = 1U;
  static constexpr uint8_t Mask = (1U << Width) - 1U;
  static constexpr uint8_t Position = position;

public:
  BitFieldModel& operator=(bool value)
  {
    m_value = (m_value & ~(Mask << position)) | (value << position);
    return *this;
  }

  explicit operator bool() const
  {
    return m_value & (Mask << position);
  }

private:
  uint8_t m_value;

  static_assert(position >= 0 && position <= 7, "BitFiled position must be between 0 and 7");
};

}  // namespace

#endif /* DRAL_REGISTER_MODEL_H */
