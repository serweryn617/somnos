[dral]include header.dral[#dral]

#ifndef DRAL_REGISTER_MODEL_H
#define DRAL_REGISTER_MODEL_H

#include <cstdint>

namespace dral {

template<typename T, unsigned int position, unsigned int width = 1>
class BitFieldModel
{
public:
  static constexpr T Width = width;
  static constexpr T Mask = (1U << width) - 1U;
  static constexpr T Position = position;

public:
  template<typename U>
  BitFieldModel& operator=(U value)
  {
    m_value = (m_value & ~(Mask << position)) | ((value & Mask) << position);
    return *this;
  }

  operator T() const
  {
    return (m_value >> position) & Mask;
  }

  explicit operator bool() const
  {
    return m_value & (Mask << position);
  }

  BitFieldModel& operator++()
  {
    return *this = *this + 1U;
  }

  T operator++(int)
  {
    const T result = *this;
    ++*this;
    return result;
  }

  BitFieldModel& operator--()
  {
    return *this = *this - 1U;
  }

  T operator--(int)
  {
    const T result = *this;
    --*this;
    return result;
  }

private:
  T m_value;

  static_assert(position >= 0 && position < sizeof(T) * 8, "BitFiled position invalid");
  static_assert(width >= 1 && width <= sizeof(T) * 8, "BitFiled width invalid");
};

template<typename T, unsigned int position>
class BitFieldModel<T, position, 1U>
{
public:
  static constexpr T Width = 1U;
  static constexpr T Mask = (1U << Width) - 1U;
  static constexpr T Position = position;

public:
  BitFieldModel& operator=(bool value)
  {
    m_value = (m_value & ~(Mask << position)) | (value << position);
    return *this;
  }

  explicit operator bool() const
  {
    return m_value & (Mask << position);
  }

private:
  T m_value;

  static_assert(position >= 0 && position < sizeof(T) * 8, "BitFiled position invalid");
};

}  // namespace

#endif /* DRAL_REGISTER_MODEL_H */
